    {
        "rect":"const newNode = topology.addNode({\n      rect:{ \n        x:10, \n        y:10,\n        width:50,\n        height:50\n      },\n      name:'circle',\n      strokeStyle:'red'\n})",
        "strokeStyle":"const newNode = topology.addNode({\n      rect:{ \n        x:10, \n        y:10,\n        width:50,\n        height:50\n      },\n      name:'circle',\n      strokeStyle:'red'\n})",
        "pens1":"const newNode = topology.addNode({\n       rect: {\n           x:10,\n           y: 10,\n            width: 50,\n            height: 50,\n            },\n       name: 'triangle',\n       strokeStyle: 'red',\n       lineWidth:10,\n       fillStyle:'black',\n       globalAlpha:1,\n       rotate:90\n      });",
        "font":"const newNode = topology.addNode({\n      rect: {\n        x:10,\n        y: 10,\n        width: 150,\n        height: 50\n      },\n      name:'rectangle',\n      text:'我是一个文本',\n      font:{\n        color:'#000',\n        background:'red',\n        fontSize:15\n      },\n      locked:1\n       });",
        "msg":"const canvasOptions={};const onMessage=(event,data)=>{console.log(event,data)};canvasOptions.on=onMessage;",
        "bkType":"const newNode = topology.addNode({\n      rect: {\n        x:10,\n        y: 10,\n        width: 150,\n        height: 50\n      },\n      name:'rectangle',\n      zRotate:45,\n      bkType:1,\n      gradientFromColor:'#A9FDFF',\n      gradientToColor:'#EEB6D3',\n      gradientAngle:90\n       });",
        "line":"const newLine = topology.addLine({\n      from:{\n        x:100,\n        y:100,\n        direction:2,\n        anchorIndex:2\n      },\n      to:{\n        x:250,\n        y:100,\n        direction:1,\n        anchorIndex:1\n      },\n      name:'line',\n      toArrowColor:'red',\n      fromArrow:'triangle',\n      toArrow:'circleSolid'\n})",
        "animationNode":"const node = topology.addNode({\n      rect:{\n        x:10,\n        y:10,\n        height:100,\n        width:100\n      },\n      name:'circle'\n});\nconst state = Node.cloneState(node);\nstate.rect.y-=10;\nstate.rect.ey-=10;\nnode.animateFrames.push({\n     duration:100,\n     linear:true,\n     state\n});\nconst state2 = Node.cloneState(node);\nnode.animateFrames.push({\n     duration:100,\n     linear:true,\n     state:state2\n});\nnode.animateDuration = 0;\nfor(const item of node.animateFrames){\n    node.animateDuration += item.duration;\n};\nnode.animateStart = Date.now();\ntopology.animate();",
        "animationLine":"const newLine = topology.addLine({\n      from:{\n        x:50,\n        y:50,\n        direction:2,\n        anchorIndex:2\n      },\n      to:{\n        x:250,\n        y:100,\n        direction:1,\n        anchorIndex:1\n      },\n      name:'line'\n});\nnewLine.animateType = 'comet';\nnewLine.animateStart = Date.now();\ntopology.animate();"
    }
